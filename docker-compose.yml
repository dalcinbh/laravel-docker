version: '3'
services:
    nginx:
        container_name: nginx
        restart: always
        build:
            context: ./nginx
            dockerfile: Dockerfile
        volumes:
            - ${APPLICATION}:/var/www/project
            - ${APPLICATION_API}:/var/www/project-api
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
            - ${NGINX_SITES_PATH}:/etc/nginx/conf.d
            - ${NGINX_SSL_PATH}:/etc/nginx/ssl
        ports:
            - "${NGINX_HOST_HTTP_PORT}:80"
            - "${NGINX_HOST_HTTPS_PORT}:443"
        links:
            - php-fpm
        networks:
            - code-network
    php-fpm:
        container_name: php-fpm
        restart: always
        build:
            context: ./php-fpm
            args:
                - PHP_VERSION=${PHP_VERSION}
                - INSTALL_FTP=${PHP_FPM_INSTALL_FTP}
                - INSTALL_MBSTRING=${PHP_FPM_INSTALL_MBSTRING}
                - INSTALL_MCRYPT=${PHP_FPM_INSTALL_MCRYPT}
                - INSTALL_PDO_MYSQL=${PHP_FPM_INSTALL_PDO_MYSQL}
                - INSTALL_PDO_POSTGRESQL=${PHP_FPM_INSTALL_PDO_POSTGRESQL}
                - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
                - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
                - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - INSTALL_CURL=${PHP_FPM_INSTALL_CURL}
                - INSTALL_OPENSSL=${PHP_FPM_INSTALL_OPENSSL}
                - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
                - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGODB}
                - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
            dockerfile: Dockerfile
        expose:
            - "9000"
        volumes:
            - ${APPLICATION}:/var/www/project
            - ${APPLICATION_API}:/var/www/project-api
        networks:
            - code-network
    mysql:
      container_name: mysql
      restart: always
      build:
        context: ./mysql
        dockerfile: Dockerfile
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${MYSQL_DATA}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - code-network
    mongodb:
        container_name: 'mongodb'
        restart: always
        environment:
            - MONGODB_USER=${MONGODB_USER}
            - MONGODB_PASS=${MONGODB_PASS}
        ports:
            - '${MONGODB_PORT}:27017'
        build:
            context: ./mongodb
            dockerfile: Dockerfile
        volumes:
            - '${MONGODB_DATA}:/data/db'
        networks:
            - code-network
    postgres:
        container_name: postgres
        restart: always
        build:
            context: ./postgres
            dockerfile: Dockerfile
        volumes:
            - pgdata:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASS}
        networks:
            - code-network
    redis:
        container_name: redis
        restart: always
        build:
            context: ./redis
            dockerfile: Dockerfile
        network_mode: bridge
        ports:
            - "6379:6379"
        volumes:
            - '${REDIS_DATA}:/data/redis'
networks:
    code-network:
        driver: bridge
volumes:
  pgdata:
    external: true
